#pragma checksum "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0e5dc24d2d419d8d9c66c26736f830437d5b9b27"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blavalon.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 3 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 4 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using Microsoft.AspNetCore.Components.Layouts;

#line default
#line hidden
#line 5 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 6 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 7 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using Blavalon;

#line default
#line hidden
#line 8 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\_Imports.razor"
using Blavalon.Shared;

#line default
#line hidden
#line 2 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\Pages\Index.razor"
using Blavalon.Data;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 175 "C:\Users\t-dygra\source\repos\Blavalon\Blavalon\Pages\Index.razor"
       
    // name is the only local state, other values are retreived from server
    string MyName = "";
    bool LakeMode = false;

    // these actions change server state; forcing other clients to reload
    void CreateRoom()
    {
        var id = rooms.CreateRoom(MyName);
        JoinRoom(id);
    }

    void JoinRoom(Guid roomId)
    {
        if (HasRoom)
        {
            return;
        }
        rooms.GetRoom(roomId).Players.Add(MyName);
        synchronizer.ForceRefresh();
    }

    void RemoveFromRoom(string playerName)
    {
        if (!HasRoom)
        {
            return;
        }

        MyRoom.Players.Remove(playerName);
        synchronizer.ForceRefresh();
    }

    void StartGame()
    {
        if (!HasRoom)
        {
            return;
        }
        MyRoom.StartGame();
        synchronizer.ForceRefresh();
    }

    // these methods retreive information but don't modify anything
    Room MyRoom => rooms.GetRoomForPlayer(MyName);

    bool AmRoomCreator => MyName == MyRoom.Creator;
    GameInformation info => MyRoom.Assignments.GetValueOrDefault(MyName, null);
    bool SpectatorMode => MyRoom.Active && !MyRoom.Assignments.ContainsKey(MyName);

    bool HasName => MyName != "";
    bool HasRoom => MyRoom != null;

    RoomConfiguration config => MyRoom.Config;

    string GetMyRoleName()
    {
        if (info is null)
        {
            return "Roll not yet assigned";
        }
        if (SpectatorMode)
        {
            return "You are spectating";
        }

        return GetRoleName(info.YourRole);
    }

    string GetRoleName(Role role)
    {
        switch (role)
        {
            case Role.GenericGood: return "Generic Good";
            case Role.GenericEvil: return "Generic Evil";
            case Role.Assassin: return "the Assassin";
            default: return role.ToString();
        }
    }

    string GetLakeInfo()
    {
        if (config.LakeShowsRoles)
        {
            return $"{MyName} is {GetMyRoleName()}.";
        }
        else
        {
            var good = new[] { Role.GenericGood, Role.Percival, Role.Merlin };
            var alignment = good.Contains(info.YourRole) ? "good" : "evil";
            return $"{MyName} is {alignment}.";
        }
    }

    List<string> GetKnowledge()
    {
        if (SpectatorMode)
        {
            return MyRoom.Assignments.Select(kv => $"{kv.Key} is {GetRoleName(kv.Value.YourRole)}").ToList();
        }
        else if (info != null)
        {
            return info.Knowledge;
        }
        else
        {
            return new List<string>();
        }
    }

    protected override void OnInit()
    {
        synchronizer.RefreshEvent += (async () =>
        {
            await this.Invoke(this.StateHasChanged);
        });
        base.OnInit();
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DylanAsAService synchronizer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RoomService rooms { get; set; }
    }
}
#pragma warning restore 1591
